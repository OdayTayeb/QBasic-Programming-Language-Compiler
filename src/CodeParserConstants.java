/* Generated By:JavaCC: Do not edit this line. CodeParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CodeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 3;
  /** RegularExpression Id. */
  int MINUS = 4;
  /** RegularExpression Id. */
  int MULTIPLY = 5;
  /** RegularExpression Id. */
  int DIVIDE = 6;
  /** RegularExpression Id. */
  int STRING = 7;
  /** RegularExpression Id. */
  int CHAR = 8;
  /** RegularExpression Id. */
  int CONSTANT = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int POWER = 11;
  /** RegularExpression Id. */
  int MOD = 12;
  /** RegularExpression Id. */
  int LP = 13;
  /** RegularExpression Id. */
  int RP = 14;
  /** RegularExpression Id. */
  int qMARK = 15;
  /** RegularExpression Id. */
  int dMARK = 16;
  /** RegularExpression Id. */
  int andMARK = 17;
  /** RegularExpression Id. */
  int hashMARK = 18;
  /** RegularExpression Id. */
  int PERCENT = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int ASSIGN = 22;
  /** RegularExpression Id. */
  int SIN = 23;
  /** RegularExpression Id. */
  int COS = 24;
  /** RegularExpression Id. */
  int SQRT = 25;
  /** RegularExpression Id. */
  int ABS = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int THEN = 29;
  /** RegularExpression Id. */
  int ELSEIF = 30;
  /** RegularExpression Id. */
  int ENDIF = 31;
  /** RegularExpression Id. */
  int DO = 32;
  /** RegularExpression Id. */
  int LOOP = 33;
  /** RegularExpression Id. */
  int WHILE = 34;
  /** RegularExpression Id. */
  int UNTIL = 35;
  /** RegularExpression Id. */
  int END = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int TO = 38;
  /** RegularExpression Id. */
  int STEP = 39;
  /** RegularExpression Id. */
  int NEXT = 40;
  /** RegularExpression Id. */
  int SPACE = 41;
  /** RegularExpression Id. */
  int LINE = 42;
  /** RegularExpression Id. */
  int Quotation = 43;
  /** RegularExpression Id. */
  int COMP = 44;
  /** RegularExpression Id. */
  int INPUT = 45;
  /** RegularExpression Id. */
  int PRINT = 46;
  /** RegularExpression Id. */
  int SEMI = 47;
  /** RegularExpression Id. */
  int TWODOTS = 48;
  /** RegularExpression Id. */
  int ID = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\r\"",
    "\"\\t\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<STRING>",
    "<CHAR>",
    "<CONSTANT>",
    "<DIGIT>",
    "\"^\"",
    "\"MOD\"",
    "\"(\"",
    "\")\"",
    "\"!\"",
    "\"$\"",
    "\"&\"",
    "\"#\"",
    "\"%\"",
    "\"AND\"",
    "\"OR\"",
    "\"=\"",
    "\"SIN\"",
    "\"COS\"",
    "\"SQRT\"",
    "\"ABS\"",
    "\"IF\"",
    "\"ELSE\"",
    "\"THEN\"",
    "\"ELSE IF\"",
    "\"END IF\"",
    "\"DO\"",
    "\"LOOP\"",
    "\"WHILE\"",
    "\"UNTIL\"",
    "\"END\"",
    "\"FOR\"",
    "\"TO\"",
    "\"STEP\"",
    "\"NEXT\"",
    "\" \"",
    "\"\\n\"",
    "\"\\\"\"",
    "<COMP>",
    "\"INPUT\"",
    "\"PRINT\"",
    "\";\"",
    "\":\"",
    "<ID>",
    "\"?\"",
  };

}
