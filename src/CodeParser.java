/* Generated By:JavaCC: Do not edit this line. CodeParser.java */
import java.util.ArrayList;
public class CodeParser implements CodeParserConstants {
  static ArrayList <Exception > Excep = new ArrayList <Exception >();
  static ArrayList <variableNode> VIP = new ArrayList<variableNode>();
  public static void main(String args[])
  {
       CodeParser Parser = new CodeParser(System.in);
       try {
               program();
       }
       catch(ParseException e)
       {
                        System.out.println("Main : "+e);
           }
           for (int i=0;i<Excep.size();i++)
           {
                        System.out.println("ERROR "+(i+1)+" : "+Excep.get(i));
           }
  }

  static final public void program() throws ParseException {
  Node n =null;
  programNode ret = new programNode() ;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINE:
          jj_consume_token(LINE);
          break;
        case SPACE:
          jj_consume_token(SPACE);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_2:
      while (true) {
        try {
          n = statement(ret);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_3;
            }
            jj_consume_token(SPACE);
          }
          jj_consume_token(LINE);
                if (n!=null)
                        ret.addChild(n);
        } catch (ParseException e) {
                        Excep.add(e);
                        do
                        {

                        }while(CodeParserTokenManager.getNextToken().image != "\u005cn");
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE:
            jj_consume_token(LINE);
            break;
          case SPACE:
            jj_consume_token(SPACE);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case DO:
        case END:
        case FOR:
        case INPUT:
        case PRINT:
        case ID:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(50);
             ret.Start();
    } catch (ParseException e) {

    }
  }

  static final public Node statement(programNode x) throws ParseException {
  Node n =null;
  statementNode ret = new statementNode(x) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      n = print(x);
      break;
    case ID:
      n = variable_assignment(x);
      break;
    case INPUT:
      n = input(x);
      break;
    case IF:
      n = if_st(x);
      break;
    case END:
      n = end(x);
      break;
    case FOR:
      n = for_st(x);
      break;
    case DO:
      n = while_st(x);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if (n!=null)
                ret.addChild(n);
            {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node end(programNode x) throws ParseException {
    jj_consume_token(END);
    {if (true) return new endNode(x) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node print(programNode x) throws ParseException {
  Node n = null ;
  printNode ret = new printNode(x) ;
    jj_consume_token(PRINT);
    label_5:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
    }
    n = value(x);
                                   ret.addChild(n);
    label_6:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_6;
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(SEMI);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_8;
        }
        jj_consume_token(SPACE);
      }
      n = value(x);
                                                                                                                                    ret.addChild(n);
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node string(programNode x) throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    stringNode ret = new stringNode(t.image , x) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node variable(programNode z) throws ParseException {
  Token t1 = null , t2 = null;
    t1 = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case qMARK:
    case dMARK:
    case andMARK:
    case hashMARK:
    case PERCENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case qMARK:
        t2 = jj_consume_token(qMARK);
        break;
      case dMARK:
        t2 = jj_consume_token(dMARK);
        break;
      case PERCENT:
        t2 = jj_consume_token(PERCENT);
        break;
      case hashMARK:
        t2 = jj_consume_token(hashMARK);
        break;
      case andMARK:
        t2 = jj_consume_token(andMARK);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     String x = "" , y ;
     if(t2 != null) {
       x = t2.image ;
       y = t1.image + t2.image ;
     }
     else {
       y = t1.image ;
     }

     for(int i=0 ; i<VIP.size() ; i++) {
                        if(VIP.get(i).getID().equals(y)) {
                                {if (true) return VIP.get(i) ;}
                }
         }


     variableNode ret = new variableNode(y , x , z) ;
     VIP.add(ret) ;
     {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node value(programNode x) throws ParseException {
  Node n1 = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case CONSTANT:
    case LP:
    case SIN:
    case COS:
    case SQRT:
    case ABS:
    case ID:
      n1 = E(x);
      break;
    case STRING:
      n1 = string_concatenation(x);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n1 ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node string_concatenation(programNode x) throws ParseException {
  Node n1 = null ;
  string_concatenationNode ret = new string_concatenationNode(x);
    n1 = string(x);
                  ret.addChild(n1);
    label_9:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_9;
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(PLUS);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        jj_consume_token(SPACE);
      }
      n1 = string(x);
                                                                                                                      ret.addChild(n1);
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node variable_assignment(programNode x) throws ParseException {
  Node n1 = null , n2 = null ;

    variable_assignmentNode ret = new variable_assignmentNode(x) ;
    n1 = variable(x);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_12;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(ASSIGN);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_13;
      }
      jj_consume_token(SPACE);
    }
    n2 = value(x);
    ret.addChild(n1);
    ret.addChild(n2);
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node input(programNode x) throws ParseException {
  Node n = null ;
  Node n2=null;

   inputNode ret = new inputNode(x) ;
    jj_consume_token(INPUT);
    jj_consume_token(SPACE);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_14;
      }
      jj_consume_token(SPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      n2 = string(x);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_15;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(SEMI);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_16;
        }
        jj_consume_token(SPACE);
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n = variable(x);
    ret.addChild(n);
    if (n2!=null)
        ret.addChild(n2);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node if_st(programNode x) throws ParseException {
  Node n1 = null , n2 = null ;
  ifNode ret = new ifNode(x) ;
    jj_consume_token(IF);
    jj_consume_token(SPACE);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_17;
      }
      jj_consume_token(SPACE);
    }
    n1 = condition(x);
                                               ret.addChild(n1);
    jj_consume_token(SPACE);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_18;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(THEN);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_19;
      }
      jj_consume_token(SPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case DO:
    case END:
    case FOR:
    case INPUT:
    case PRINT:
    case ID:
      n2 = statement(x);
                                    ret.addChild(n2);
      label_20:
      while (true) {
        if (jj_2_3(2147483647)) {
          ;
        } else {
          break label_20;
        }
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_21;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(TWODOTS);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_22;
          }
          jj_consume_token(SPACE);
        }
        n2 = statement(x);
                                                                                                             ret.addChild(n2);
      }
      if (jj_2_4(2147483647)) {
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_23;
          }
          jj_consume_token(SPACE);
        }
        n2 = else_st_one_line(x);
                                                                                       ret.addChild(n2);
      } else {
        ;
      }
      break;
    case LINE:
      jj_consume_token(LINE);
      label_24:
      while (true) {
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_25;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            jj_consume_token(SPACE);
            break;
          case LINE:
            jj_consume_token(LINE);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n2 = statement(x);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_26;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(LINE);
                                                                                                                                                                   ret.addChild(n2);
        if (jj_2_5(2147483647)) {
          ;
        } else {
          break label_24;
        }
      }
      label_27:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_27;
        }
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_28;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            jj_consume_token(SPACE);
            break;
          case LINE:
            jj_consume_token(LINE);
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n2 = elseif_st(x);
                                                                                           ret.addChild(n2);
      }
      if (jj_2_7(2147483647)) {
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_29;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            jj_consume_token(SPACE);
            break;
          case LINE:
            jj_consume_token(LINE);
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n2 = else_st(x);
                                                                                       ret.addChild(n2);
      } else {
        ;
      }
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          jj_consume_token(SPACE);
          break;
        case LINE:
          jj_consume_token(LINE);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ENDIF);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node elseif_st(programNode x) throws ParseException {
  Node n1 = null , n2 = null ;
  elseifNode ret = new elseifNode(x) ;
    jj_consume_token(ELSEIF);
    jj_consume_token(SPACE);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_31;
      }
      jj_consume_token(SPACE);
    }
    n1 = condition(x);
                                                  ret.addChild(n1);
    jj_consume_token(SPACE);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_32;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(THEN);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_33;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(LINE);
    label_34:
    while (true) {
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_35;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          jj_consume_token(SPACE);
          break;
        case LINE:
          jj_consume_token(LINE);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n2 = statement(x);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_36;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(LINE);
                                                                                                                                                                                                                                                                           ret.addChild(n2);
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_34;
      }
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node else_st(programNode x) throws ParseException {
  Node n1 = null ;
  elseNode ret = new elseNode(x) ;
    jj_consume_token(ELSE);
    label_37:
    while (true) {
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_38;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          jj_consume_token(SPACE);
          break;
        case LINE:
          jj_consume_token(LINE);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n1 = statement(x);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_39;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(LINE);
                                                                                                                                                                ret.addChild(n1);
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_37;
      }
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node else_st_one_line(programNode x) throws ParseException {
  Node n2 = null ;
  elseNode ret = new elseNode(x) ;
    jj_consume_token(ELSE);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_40;
      }
      jj_consume_token(SPACE);
    }
    n2 = statement(x);
                                         ret.addChild(n2);
    label_41:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_41;
      }
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_42;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(TWODOTS);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_43;
        }
        jj_consume_token(SPACE);
      }
      n2 = statement(x);
                                                                                               ret.addChild(n2);
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node compare(programNode x) throws ParseException {
  Token t ;
  Node n1 , n2 ;
    n1 = value(x);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_44;
      }
      jj_consume_token(SPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMP:
      t = jj_consume_token(COMP);
      break;
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_45;
      }
      jj_consume_token(SPACE);
    }
    n2 = value(x);
    compareNode ret = new compareNode(t.image , x) ;
    ret.addChild(n1) ;
    ret.addChild(n2) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node condition(programNode x) throws ParseException {
  Node n,n1;
  conditionNode ret=new conditionNode(x);
    n = compare(x);
                       ret.addChild(n);
    label_46:
    while (true) {
      if (jj_2_11(2147483647)) {
        ;
      } else {
        break label_46;
      }
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_47;
        }
        jj_consume_token(SPACE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                                                                                                            ret.addChild(new logicalNode("AND",x));
        break;
      case OR:
        jj_consume_token(OR);
                                                                                                                                                               ret.addChild(new logicalNode("OR",x));
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_48;
        }
        jj_consume_token(SPACE);
      }
      n1 = compare(x);
                                                                                                                                                                                                                                      ret.addChild(n1);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node for_st(programNode x) throws ParseException {
  Node n ;
  Token t = null ;
  forNode ret = new forNode(x) ;
    jj_consume_token(FOR);
    jj_consume_token(SPACE);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_49;
      }
      jj_consume_token(SPACE);
    }
    n = variable(x);
                                            ret.addChild(n);
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_50;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(ASSIGN);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_51;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
                                                                                                      ret.addChild(n);
    jj_consume_token(SPACE);
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_52;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(TO);
    jj_consume_token(SPACE);
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_53;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
                                                    ret.addChild(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_54;
        }
        jj_consume_token(SPACE);
      }
      t = jj_consume_token(STEP);
      jj_consume_token(SPACE);
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_55;
        }
        jj_consume_token(SPACE);
      }
      n = E(x);
                                                                                                                              ret.addChild(n);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(LINE);
    label_56:
    while (true) {
      if (jj_2_12(2147483647)) {
        ;
      } else {
        break label_56;
      }
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_57;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          jj_consume_token(SPACE);
          break;
        case LINE:
          jj_consume_token(LINE);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n = statement(x);
                                                                                                                                         ret.addChild(n);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_58;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(LINE);
    }
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
      case LINE:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_59;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        jj_consume_token(SPACE);
        break;
      case LINE:
        jj_consume_token(LINE);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(NEXT);
    jj_consume_token(SPACE);
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_60;
      }
      jj_consume_token(SPACE);
    }
    n = variable(x);
                                                                                                                                                                                                                                                 ret.addChild(n);
    if(t != null) {
      ret.setStep(true) ;
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node while_st(programNode x) throws ParseException {
  Node n ;
  whileNode ret = new whileNode(x) ;
    jj_consume_token(DO);
    if (jj_2_15(2147483647)) {
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_61;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(LINE);
      label_62:
      while (true) {
        label_63:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_63;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            jj_consume_token(SPACE);
            break;
          case LINE:
            jj_consume_token(LINE);
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n = statement(x);
                                                                                                                                                                                   ret.addChild(n);
        label_64:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[72] = jj_gen;
            break label_64;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(LINE);
        if (jj_2_13(2147483647)) {
          ;
        } else {
          break label_62;
        }
      }
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
        case LINE:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_65;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          jj_consume_token(SPACE);
          break;
        case LINE:
          jj_consume_token(LINE);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LOOP);
      jj_consume_token(SPACE);
      label_66:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_66;
        }
        jj_consume_token(SPACE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
                                                                                                                                                                                                                                                                                    ret.setIsWhile(true);
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
                                                                                                                                                                                                                                                                                                                       ret.setIsWhile(false);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SPACE);
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_67;
        }
        jj_consume_token(SPACE);
      }
      n = condition(x);
                                                                                                                                                                                                                                                                                                                                                                                     ret.addChild(n);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        jj_consume_token(SPACE);
        label_68:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_68;
          }
          jj_consume_token(SPACE);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          jj_consume_token(WHILE);
                                   ret.setIsWhile(true);
          break;
        case UNTIL:
          jj_consume_token(UNTIL);
                                                                      ret.setIsWhile(false);
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SPACE);
        label_69:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_69;
          }
          jj_consume_token(SPACE);
        }
        n = condition(x);
                                                                                                                                 ret.addChild(n);
        label_70:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[81] = jj_gen;
            break label_70;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(LINE);
        label_71:
        while (true) {
          label_72:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
            case LINE:
              ;
              break;
            default:
              jj_la1[82] = jj_gen;
              break label_72;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
              jj_consume_token(SPACE);
              break;
            case LINE:
              jj_consume_token(LINE);
              break;
            default:
              jj_la1[83] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          n = statement(x);
                                                                                                                                                                                                                                                                                                  ret.addChild(n);
          label_73:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
              ;
              break;
            default:
              jj_la1[84] = jj_gen;
              break label_73;
            }
            jj_consume_token(SPACE);
          }
          jj_consume_token(LINE);
          if (jj_2_14(2147483647)) {
            ;
          } else {
            break label_71;
          }
        }
        label_74:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
          case LINE:
            ;
            break;
          default:
            jj_la1[85] = jj_gen;
            break label_74;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            jj_consume_token(SPACE);
            break;
          case LINE:
            jj_consume_token(LINE);
            break;
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LOOP);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node sin_st(programNode x) throws ParseException {
  Node n ;
  sinNode ret = new sinNode(x) ;
    jj_consume_token(SIN);
    label_75:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_75;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(LP);
    label_76:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_76;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
    label_77:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_77;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(RP);
    ret.addChild(n) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node cos_st(programNode x) throws ParseException {
  Node n ;
  cosNode ret = new cosNode(x) ;
    jj_consume_token(COS);
    label_78:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_78;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(LP);
    label_79:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_79;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
    label_80:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_80;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(RP);
    ret.addChild(n) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node abs_st(programNode x) throws ParseException {
  Node n ;
  absNode ret = new absNode(x) ;
    jj_consume_token(ABS);
    label_81:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_81;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(LP);
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_82;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
    label_83:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_83;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(RP);
    ret.addChild(n) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node sqrt_st(programNode x) throws ParseException {
  Node n ;
  sqrtNode ret = new sqrtNode(x) ;
    jj_consume_token(SQRT);
    label_84:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_84;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(LP);
    label_85:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_85;
      }
      jj_consume_token(SPACE);
    }
    n = E(x);
    label_86:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_86;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(RP);
    ret.addChild(n) ;
    {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  static final public Node E(programNode x) throws ParseException {
        Token t=null;
        Node n1,n2=null;
    n1 = F(x);
    if (jj_2_16(2147483647)) {
      label_87:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_87;
        }
        jj_consume_token(SPACE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_88:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_88;
        }
        jj_consume_token(SPACE);
      }
      n2 = E(x);
    } else {
      ;
    }
                if (n2==null)
                        {if (true) return n1;}

                OperationNode ret=new OperationNode(t.image , x);
                ret.addChild(n1);
                ret.addChild(n2);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node F(programNode x) throws ParseException {
        Token t=null;
        Node n1,n2=null;
    n1 = PE(x);
    if (jj_2_17(2147483647)) {
      label_89:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_89;
        }
        jj_consume_token(SPACE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_90:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_90;
        }
        jj_consume_token(SPACE);
      }
      n2 = F(x);
    } else {
      ;
    }
                if (n2==null)
                        {if (true) return n1;}

                OperationNode ret=new OperationNode(t.image , x);
                ret.addChild(n1);
                ret.addChild(n2);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node PE(programNode x) throws ParseException {
        Token t=null;
        Node n1,n2=null;
    n1 = ME(x);
    if (jj_2_18(2147483647)) {
      label_91:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[106] = jj_gen;
          break label_91;
        }
        jj_consume_token(SPACE);
      }
      t = jj_consume_token(POWER);
      label_92:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[107] = jj_gen;
          break label_92;
        }
        jj_consume_token(SPACE);
      }
      n2 = PE(x);
    } else {
      ;
    }
                if (n2==null)
                        {if (true) return n1;}
                OperationNode ret=new OperationNode(t.image , x);
                ret.addChild(n1);
                ret.addChild(n2);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node ME(programNode x) throws ParseException {
        Token t=null;
        Node n1,n2=null;
    n1 = SAT(x);
    if (jj_2_19(2147483647)) {
      label_93:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_93;
        }
        jj_consume_token(SPACE);
      }
      t = jj_consume_token(MOD);
      label_94:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_94;
        }
        jj_consume_token(SPACE);
      }
      n2 = ME(x);
    } else {
      ;
    }
                if (n2==null)
                        {if (true) return n1;}
                OperationNode ret=new OperationNode(t.image , x);
                ret.addChild(n1);
                ret.addChild(n2);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node SAT(programNode x) throws ParseException {
        Token t=null;
        Node n1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      t = jj_consume_token(MINUS);
      label_95:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_95;
        }
        jj_consume_token(SPACE);
      }
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    n1 = AT(x);
                if (t==null)
                        {if (true) return n1;}
                OperationNode ret=new OperationNode("negative" , x);
                ret.addChild(n1);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Node AT(programNode x) throws ParseException {
        Token t=null;
        Node d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
                NumberNode ret=new NumberNode(t.image , x) ;
                {if (true) return ret;}
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      label_96:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[113] = jj_gen;
          break label_96;
        }
        jj_consume_token(SPACE);
      }
      d = E(x);
      label_97:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_97;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(RP);
                {if (true) return d;}
      break;
    default:
      jj_la1[115] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      d = variable(x);
          {if (true) return d ;}
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIN:
      d = sin_st(x);
          {if (true) return d ;}
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COS:
      d = cos_st(x);
          {if (true) return d ;}
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
      d = abs_st(x);
          {if (true) return d ;}
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    d = sqrt_st(x);
          {if (true) return d ;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LINE)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TWODOTS)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSEIF)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TWODOTS)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CodeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[120];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0xf8000,0xf8000,0x7802290,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x200,0x0,0x0,0x2000,0x0,0x800000,0x1000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x600,0x600,0x200,0x600,0x600,0x26031,0x26031,0x200,0x200,0x200,0x0,0x0,0x20000,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x200,0x200,0x200,0x200,0x200,0x200,0x600,0x600,0x200,0x600,0x600,0x600,0x600,0x600,0x600,0x26431,0x200,0x200,0x200,0x600,0x600,0x200,0x600,0x600,0x200,0x200,0x200,0x200,0x200,0x1000,0x200,0x200,0x0,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x600,0x600,0x200,0x600,0x600,0x200,0x200,0x600,0x600,0x200,0x600,0x600,0x200,0xc,0x200,0x200,0xc,0x200,0x200,0x600,0x600,0x200,0x600,0x600,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x200,0x200,0x0,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x0,0x200,0x200,0x0,0x20000,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CodeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CodeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CodeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CodeParser(CodeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 120; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
