/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
}

PARSER_BEGIN(CodeParser)

import java.util.ArrayList;
public class CodeParser
{
  static ArrayList <Exception > Excep = new ArrayList <Exception >();
  static ArrayList <variableNode> VIP = new ArrayList<variableNode>();
  public static void main(String args[]) 
  {
       CodeParser Parser = new CodeParser(System.in);
       try { 
	       program();
       }
       catch(ParseException e)
       {
			System.out.println("Main : "+e);
	   }
	   for (int i=0;i<Excep.size();i++)
	   {
			System.out.println("ERROR "+(i+1)+" : "+Excep.get(i));
	   }
  }
}

PARSER_END(CodeParser)


SKIP :
{
  "\r"
| "\t"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN : { <STRING : "\"" (<CHAR>)* "\"" >
        | <#CHAR : ~["\""] > // Any character that is not "
}


TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : (["0"-"9"])+("."(["0"-"9"])+)? >
 
}

TOKEN :
{
	< POWER : "^" >
}

TOKEN :
{
	< MOD : "MOD" >
}

TOKEN :
{
	< LP : "(" > 
}

TOKEN :
{
	< RP : ")" > 
}

TOKEN : /* OPERATIONS*/
{
  
 < qMARK : "!" >
| < dMARK : "$" >
| < andMARK : "&" >
| < hashMARK : "#" >

| < PERCENT :"%" >

| < AND : "AND" >
| < OR : "OR" >
| < ASSIGN: "=" >
| < SIN : "SIN" >
| < COS : "COS" >
| < SQRT : "SQRT" >
| < ABS : "ABS" >
| < IF: "IF" >
| < ELSE: "ELSE" >
| < THEN: "THEN" >
| < ELSEIF: "ELSE IF" >
| < ENDIF: "END IF" >

| < DO: "DO" >
| < LOOP: "LOOP" >
| < WHILE: "WHILE" >
| < UNTIL: "UNTIL" >
| < END: "END" >

| < FOR: "FOR" >
| < TO: "TO" >
| < STEP: "STEP" >
| < NEXT: "NEXT" >
| < SPACE: " " >
| < LINE:"\n" >

| <Quotation: "\"">
| < COMP: ">=" | "<=" | ">" | "<" | "<>" >

| < INPUT: "INPUT" >
| < PRINT: "PRINT" >

| < SEMI: ";" >
| < TWODOTS : ":" >
| < ID: (["a"-"z"]| ["A"-"Z"])(["a"-"z"]|["0"-"9"]|"_" | ["A"-"Z"])* >
//| < TEXT:(["a"-"z"]|["0"-"9"]|"_" | ["A"-"Z"] | " ")* >
}

void program():
{
  Node n =null;
  programNode ret = new programNode() ;
}
{
  	 try { 
	 (< LINE > | < SPACE >)*
	 (
		try { 
	   		n = statement(ret)(< SPACE >)* <LINE>
	   		{
	      	if (n!=null)
	    		ret.addChild(n);
	 		}
	 	}
	 	catch(ParseException e) {
			Excep.add(e);
			do
			{

			}while(CodeParserTokenManager.getNextToken().image != "\n");
	 	}
		(< LINE > | < SPACE >)*
	 )+ "?"
	 {
	     ret.Start();
	 }

	}catch(ParseException e) {

	}
	
}

Node statement(programNode x):
{
  Node n =null;
  statementNode ret = new statementNode(x) ; 
}
{
  	  (n = print(x) | n = variable_assignment(x) | n = input(x)
	   | n = if_st(x) | n = end(x) | n = for_st(x) | n = while_st(x)  )
	
	  {
	    if (n!=null)
	    	ret.addChild(n);
	    return ret ;
	  }
	
}


Node end(programNode x):
{
}
{
  < END >
  {
    return new endNode(x) ;
  }
}

Node print(programNode x):
{
  Node n = null ;
  printNode ret = new printNode(x) ; 
}
{
  <PRINT> (<SPACE>)+ n = value(x) {ret.addChild(n);} (LOOKAHEAD((< SPACE >)*< SEMI >) (< SPACE >)*<SEMI>(< SPACE >)*  n = value(x) {ret.addChild(n);})*
  {
    return ret ;
  }
}


Node string(programNode x):
{
  Token t;
}
{
  t=< STRING >
  {
    stringNode ret = new stringNode(t.image , x) ;
    return ret ;
  }
}

Node variable(programNode z):
{
  Token t1 = null , t2 = null;
  
}
{
   t1 = < ID > (t2 = <qMARK> |t2 = <dMARK> |t2 = <PERCENT> |t2 = <hashMARK> |t2 = <andMARK>)?
   {
     String x = "" , y ;
     if(t2 != null) {
       x = t2.image ;
       y = t1.image + t2.image ;
     }
     else {
       y = t1.image ;
     }

     for(int i=0 ; i<VIP.size() ; i++) {
			if(VIP.get(i).getID().equals(y)) {
				return VIP.get(i) ;
		}
	 }
	 
     
     variableNode ret = new variableNode(y , x , z) ;
     VIP.add(ret) ;
     return ret ;
   }
}

Node value(programNode x):
{
  Node n1 = null ; 
}
{
  (n1 = E(x) | n1 = string_concatenation(x))
  {
    return n1 ;
  }
}

Node string_concatenation(programNode x):
{
  Node n1 = null ;
  string_concatenationNode ret = new string_concatenationNode(x); 
}
{
  n1 = string(x) {ret.addChild(n1);}(LOOKAHEAD( (< SPACE >)* < PLUS >) (< SPACE >)*<PLUS> (< SPACE >)* n1 = string(x){ret.addChild(n1);})*
  {
    return ret ;
  }
}

Node variable_assignment(programNode x):
{
  Node n1 = null , n2 = null ;
	
    variable_assignmentNode ret = new variable_assignmentNode(x) ;
}
{
  n1 = variable(x)(< SPACE >)* <ASSIGN>(< SPACE >)* n2 = value(x)
  {
    ret.addChild(n1);
    ret.addChild(n2);
    return ret ;
  }
}

Node input(programNode x):
{
  Node n = null ;
  Node n2=null;
  
   inputNode ret = new inputNode(x) ;
}
{
  <INPUT> <SPACE>(< SPACE >)* (n2=string(x)(< SPACE >)* <SEMI>(< SPACE >)*)? n = variable(x)
  {
    ret.addChild(n);
    if (n2!=null)
    	ret.addChild(n2);
    return ret;
  }
}

Node if_st(programNode x):
{
  Node n1 = null , n2 = null ;
  ifNode ret = new ifNode(x) ;
}
{
   <IF> <SPACE>(< SPACE >)* n1 = condition(x) {ret.addChild(n1);} <SPACE>(< SPACE >)* <THEN> (< SPACE >)*
(	(		(n2 = statement(x) {ret.addChild(n2); })
		(LOOKAHEAD((< SPACE >)* < TWODOTS >) (< SPACE >)* < TWODOTS > (< SPACE >)* n2 = statement(x){ret.addChild(n2); } )*		(LOOKAHEAD((< SPACE >)*< ELSE > ) (< SPACE >)*n2=else_st_one_line(x) { ret.addChild(n2); })?		  
	)
	| 
    (
    <LINE>  (LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(< SPACE >|< LINE >)* n2 = statement(x)(< SPACE >)* <LINE> {ret.addChild(n2); })+
  	(LOOKAHEAD((< SPACE >|< LINE >)*< ELSEIF >)(< SPACE >|< LINE >)*n2 = elseif_st(x) {ret.addChild(n2); })*
  	(LOOKAHEAD((< SPACE >|< LINE >)*< ELSE >)(< SPACE >|< LINE >)*n2 = else_st(x) {ret.addChild(n2);})? (< SPACE >|< LINE >)* <ENDIF>

	)
)    
  {
    return ret ;
  }


}

Node elseif_st(programNode x):
{
  Node n1 = null , n2 = null ;
  elseifNode ret = new elseifNode(x) ;
}
{ 
  <ELSEIF> <SPACE>(< SPACE >)* n1 = condition(x) {ret.addChild(n1);} <SPACE>(< SPACE >)* <THEN>(< SPACE >)* <LINE>  (LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(< SPACE >|< LINE >)* n2 = statement(x)(< SPACE >)* <LINE> {ret.addChild(n2); })+
  {
    return ret ;
  }
	
}


Node else_st(programNode x):
{
  Node n1 = null ;
  elseNode ret = new elseNode(x) ;
}
{
  <ELSE> (LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(< SPACE >|< LINE >)* n1 = statement(x)(< SPACE >)* <LINE> {ret.addChild(n1); })+
  {
    return ret ;
  }

}

Node else_st_one_line(programNode x):
{
  Node n2 = null ;
  elseNode ret = new elseNode(x) ;
}
{
  <ELSE> ((< SPACE >)*n2 = statement(x) {ret.addChild(n2); })
  (LOOKAHEAD((< SPACE >)* < TWODOTS >) (< SPACE >)* < TWODOTS > (< SPACE >)* n2 = statement(x){ret.addChild(n2); } )*
		
  {
    return ret ;
  }
}

Node compare(programNode x):
{
  Token t ;
  Node n1 , n2 ;
}
{
  n1 = value(x) (< SPACE >)* (t = <COMP> | t = < ASSIGN >) (< SPACE >)* n2 = value(x)
  {
    
    compareNode ret = new compareNode(t.image , x) ;
    ret.addChild(n1) ;
    ret.addChild(n2) ;
    return ret ;
  }

}

Node condition(programNode x):
{
  Node n,n1;
  conditionNode ret=new conditionNode(x); 
}
{
	n=compare(x) { ret.addChild(n); } ( LOOKAHEAD((< SPACE >)*(< AND >|< OR >)) (< SPACE >)* (< AND > { ret.addChild(new logicalNode("AND",x)); }|< OR > { ret.addChild(new logicalNode("OR",x)); }) (< SPACE >)* n1=compare(x) { ret.addChild(n1); } )*
	{
		return ret;
	}
}

Node for_st(programNode x):
{
  Node n ;
  Token t = null ;
  forNode ret = new forNode(x) ;
}
{
  <FOR> <SPACE> (<SPACE>)* n = variable(x) {ret.addChild(n); } (<SPACE>)*<ASSIGN>(<SPACE>)* n = E(x) {ret.addChild(n); }
  <SPACE>(<SPACE>)* <TO> <SPACE>(<SPACE>)* n= E(x) {ret.addChild(n); } (<SPACE>(<SPACE>)*t=<STEP> <SPACE>(<SPACE>)* n = E(x) {ret.addChild(n); })?
  <LINE>(LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(<SPACE>|< LINE >)* n = statement(x) {ret.addChild(n); }(< SPACE >)*<LINE>)* (< SPACE >|< LINE >)*<NEXT> <SPACE>(< SPACE >)* n = variable(x) {ret.addChild(n); }
  {
    if(t != null) {
      ret.setStep(true) ; 
    }
    return ret ;
  }
}

Node while_st(programNode x):
{
  Node n ;
  whileNode ret = new whileNode(x) ;
}
{
  <DO> 
  (LOOKAHEAD((< SPACE >)*<LINE>)(< SPACE >)*<LINE>(LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(< SPACE >|< LINE >)*n = statement(x){ret.addChild(n);}(< SPACE >)*<LINE>)+ (< SPACE >|< LINE >)*<LOOP> <SPACE>(< SPACE >)* (<WHILE> { ret.setIsWhile(true);}|< UNTIL > { ret.setIsWhile(false);}) <SPACE>(< SPACE >)* n = condition(x){ret.addChild(n); }
    |  <SPACE>(<SPACE>)*(<WHILE> { ret.setIsWhile(true);}|< UNTIL > { ret.setIsWhile(false);})<SPACE>(<SPACE>)* n = condition(x){ret.addChild(n); }(<SPACE>)*<LINE>(LOOKAHEAD((< SPACE >|< LINE >)*(< PRINT >|< INPUT >|< ID >|< IF >|< END >|< FOR >|< DO >))(<SPACE>|< LINE >)*n = statement(x){ret.addChild(n); }(<SPACE>)*<LINE>)+ (<SPACE>|< LINE >)*<LOOP >)
  {
    return ret ;
  }
  
}


Node sin_st(programNode x):
{
  Node n ;
  sinNode ret = new sinNode(x) ;
}
{
  <SIN>(< SPACE >)*<LP>(< SPACE >)* n = E(x)(< SPACE >)* <RP> {
    ret.addChild(n) ;
    return ret ;   
  }
  
}

Node cos_st(programNode x):
{
  Node n ;
  cosNode ret = new cosNode(x) ;
}
{
  <COS>(< SPACE >)*<LP>(< SPACE >)* n = E(x)(< SPACE >)* <RP> {
    ret.addChild(n) ;
    return ret ;   
  }
  
}
Node abs_st(programNode x):
{
  Node n ;
  absNode ret = new absNode(x) ;
}
{
  <ABS>(< SPACE >)*<LP>(< SPACE >)* n = E(x)(< SPACE >)* <RP> {
    ret.addChild(n) ;
    return ret ;   
  }
  
}
Node sqrt_st(programNode x):
{
  Node n ;
  sqrtNode ret = new sqrtNode(x) ;
}
{
  <SQRT>(< SPACE >)*<LP>(< SPACE >)* n = E(x)(< SPACE >)* <RP> {
    ret.addChild(n) ;
    return ret ;   
  }
  
}

Node E(programNode x):
{
	Token t=null;
	Node n1,n2=null; 
}
{
  n1=F(x) ( LOOKAHEAD((< SPACE >)* (t=< PLUS > | (t=< MINUS >))) (< SPACE >)* (t=< PLUS > | (t=< MINUS >)) (< SPACE >)* n2=E(x))?
	{
		if (n2==null)
			return n1;
		
		OperationNode ret=new OperationNode(t.image , x);
		ret.addChild(n1);
		ret.addChild(n2);
		return ret;
	}
	
}

Node F(programNode x):
{
	Token t=null;
	Node n1,n2=null; 
}
{
	n1=PE(x)  (LOOKAHEAD((< SPACE >)* (t=< MULTIPLY > | t=< DIVIDE >)) (< SPACE >)* (t=< MULTIPLY > | t=< DIVIDE >)(< SPACE >)* n2=F(x))?
	{
		if (n2==null)  
			return n1;
		
		OperationNode ret=new OperationNode(t.image , x);
		ret.addChild(n1);
		ret.addChild(n2);
		return ret;
	}
}

Node PE(programNode x):
{
	Token t=null;
	Node n1,n2=null; 
}
{
	n1=ME(x) (LOOKAHEAD((< SPACE >)* t=< POWER >)(< SPACE >)* t=< POWER >(< SPACE >)* n2=PE(x))?
	{
		if (n2==null)
			return n1;
		OperationNode ret=new OperationNode(t.image , x);
		ret.addChild(n1);
		ret.addChild(n2);
		return ret;
	}
}

Node ME(programNode x):
{
	Token t=null;
	Node n1,n2=null; 
}
{
	n1=SAT(x) (LOOKAHEAD((< SPACE >)* t=< MOD >)(< SPACE >)* t=< MOD >(< SPACE >)* n2=ME(x))?
	{
	 	if (n2==null)
			return n1;
		OperationNode ret=new OperationNode(t.image , x);
		ret.addChild(n1);
		ret.addChild(n2);
		return ret;
	}
}

Node SAT(programNode x):
{
	Token t=null;
	Node n1; 
}
{
	(t=< MINUS >(< SPACE >)*)?n1=AT(x)
	{
	  	if (t==null)
			return n1;
		OperationNode ret=new OperationNode("negative" , x);
		ret.addChild(n1);
		return ret;
	}
}

Node AT(programNode x):
{
	Token t=null;
	Node d;
}
{
	(t=< CONSTANT >{
	  	NumberNode ret=new NumberNode(t.image , x) ;
		return ret;
	})?
	
	((< LP > (< SPACE >)* d=E(x) (< SPACE >)* < RP >)
	{
		return d;
	})?
	
	(d = variable(x) {
	  
	  return d ;
	 })?

	 (d = sin_st(x) {
	  
	  return d ;
	 })?
	 
	 (d = cos_st(x) {
	  
	  return d ;
	 })?
	 
	 (d = abs_st(x) {
	  
	  return d ;
	 })?
	 d = sqrt_st(x) {
	  
	  return d ;
	 }
	 
}
